local rw = require("scissors.read-write-operations")
local u = require("scissors.utils")

local M = {}
--------------------------------------------------------------------------------

---@param snipDir string
---@return boolean
---@nodiscard
function M.validate(snipDir)
	local snipDirInfo = vim.loop.fs_stat(snipDir)
	local packageJsonExists = vim.loop.fs_stat(snipDir .. "/package.json") ~= nil
	local isFriendlySnippetsDir = snipDir:find("/friendly%-snippets/")
		and not vim.startswith(snipDir, vim.fn.stdpath("config"))

	-- validate
	if snipDirInfo and snipDirInfo.type ~= "directory" then
		u.notify(("%q is not a directory."):format(snipDir), "error")
		return false
	elseif snipDirInfo and packageJsonExists then
		local packageJson = rw.readAndParseJson(snipDir .. "/package.json")
		if
			vim.tbl_isempty(packageJson)
			or not (packageJson.contributes and packageJson.contributes.snippets)
		then
			u.notify(
				"The `package.json` in your snippetDir is invalid.\n"
					.. "Please make sure it follows the required specification for VSCode snippets.",
				"error"
			)
			return false
		end
	elseif isFriendlySnippetsDir then
		u.notify(
			"Snippets from friendly-snippets should be edited directly, since any changes would be overwritten as soon as the repo is updated.\n"
				.. "Copy the snippet files you want from the repo into your snippet directory and edit them there.",
			"error"
		)
		return false
	end

	return true
end

-- bootstrap if snippetDir and/or `package.json` do not exist
---@param snipDir string
function M.bootstrapSnipDir(snipDir)
	local snipDirExists = vim.loop.fs_stat(snipDir) ~= nil
	local packageJsonExists = vim.loop.fs_stat(snipDir .. "/package.json") ~= nil
	local msg = ""

	if not snipDirExists then
		local success = vim.fn.mkdir(snipDir, "p")
		assert(success == 1, snipDir .. " does not exist and could not be created.")
		msg = msg .. "Snippet directory does not exist. Creating one.\n"
	end
	if not packageJsonExists then
		local packageJsonStr = [[
{
	"contributes": {
		"snippets": []
	},
	"description": "This package.json has been generated by nvim-scissors.",
	"name": "my-snippets"
}
]]
		rw.writeFile(snipDir .. "/package.json", packageJsonStr)
		msg = msg .. "`package.json` does not exist. Bootstrapping one.\n"
	end

	if msg ~= "" then u.notify(vim.trim(msg)) end
end

---@param ft string
---@return snipFile -- the newly created snippet file
function M.bootstrapSnippetFile(ft)
	u.notify("No snippet files found for filetype: " .. ft .. "\nBootstrapping one.")

	local snipDir = require("scissors.config").config.snippetDir
	local newSnipName = ft .. ".json"

	-- create empty snippet file
	local newSnipFilepath
	while true do
		newSnipFilepath = snipDir .. "/" .. newSnipName
		if vim.loop.fs_stat(newSnipFilepath) == nil then break end
		newSnipName = newSnipName .. "-1"
	end
	rw.writeFile(newSnipFilepath, "{}")

	-- update package.json
	local packageJson = rw.readAndParseJson(snipDir .. "/package.json") ---@type packageJson
	table.insert(packageJson.contributes.snippets, {
		language = { ft },
		path = "./" .. newSnipName,
	})
	rw.writeAndFormatSnippetFile(snipDir .. "/package.json", packageJson)

	-- return snipFile to directly add to it
	return { ft = ft, path = newSnipFilepath }
end

--------------------------------------------------------------------------------
return M
